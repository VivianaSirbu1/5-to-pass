{"ast":null,"code":"import ApiRequestHandler from \"./ApiRequestHelper\";\nexport default class AuthHandler {\n  constructor(state, setState) {\n    this._isMounted = true;\n    this.requestHandler = new ApiRequestHandler();\n    this.state = state;\n    this.setState = setState;\n  }\n\n  async checkSession() {\n    await this.requestHandler.head('/sessions/check-session', {\n      headers: this.getAuthorizationHeader()\n    }, resp => {\n      if (resp.status !== 204) {\n        this.setState({\n          username: '',\n          token: null\n        });\n        localStorage.removeItem('user-state');\n      }\n    });\n  }\n\n  getUsername() {\n    return this.state.username;\n  }\n\n  getToken() {\n    return this.state.token;\n  }\n\n  getAuthorizationHeader() {\n    return this.state.token ? {\n      'Authorization': `Bearer ${this.state.token}`\n    } : null;\n  }\n\n  isAuthenticated() {\n    return this.state.token != null;\n  }\n\n  async login(user, callback) {\n    await this.requestHandler.post('/sessions/login', {\n      body: user\n    }, resp => {\n      if (resp && resp.token) {\n        localStorage.setItem('user-state', JSON.stringify({\n          username: user.username,\n          token: resp.token\n        }));\n        this.setState({\n          username: user.username,\n          token: resp.token\n        });\n      }\n\n      if (callback) callback(resp);\n    });\n  }\n\n  async logout(callback) {\n    await this.requestHandler.get('/sessions/logout', {\n      headers: this.getAuthorizationHeader()\n    }, resp => {\n      localStorage.removeItem('user-state');\n      this.setState({\n        username: '',\n        token: null\n      });\n      if (callback) callback(resp);\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Viviana/Desktop/proiect/client/src/entities/AuthHandler.js"],"names":["ApiRequestHandler","AuthHandler","constructor","state","setState","_isMounted","requestHandler","checkSession","head","headers","getAuthorizationHeader","resp","status","username","token","localStorage","removeItem","getUsername","getToken","isAuthenticated","login","user","callback","post","body","setItem","JSON","stringify","logout","get"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,oBAA9B;AAEA,eAAe,MAAMC,WAAN,CACf;AAGEC,EAAAA,WAAW,CAACC,KAAD,EAAQC,QAAR,EACX;AAAA,SAHAC,UAGA,GAHa,IAGb;AACE,SAAKC,cAAL,GAAsB,IAAIN,iBAAJ,EAAtB;AACA,SAAKG,KAAL,GAAaA,KAAb;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACD;;AAED,QAAMG,YAAN,GACA;AACE,UAAM,KAAKD,cAAL,CAAoBE,IAApB,CAAyB,yBAAzB,EAAoD;AACxDC,MAAAA,OAAO,EAAE,KAAKC,sBAAL;AAD+C,KAApD,EAEHC,IAAI,IAAI;AACT,UAAGA,IAAI,CAACC,MAAL,KAAgB,GAAnB,EACA;AACE,aAAKR,QAAL,CAAc;AAAES,UAAAA,QAAQ,EAAE,EAAZ;AAAgBC,UAAAA,KAAK,EAAE;AAAvB,SAAd;AACAC,QAAAA,YAAY,CAACC,UAAb,CAAwB,YAAxB;AACD;AACF,KARK,CAAN;AASD;;AAEDC,EAAAA,WAAW,GACX;AACE,WAAO,KAAKd,KAAL,CAAWU,QAAlB;AACD;;AAEDK,EAAAA,QAAQ,GACR;AACE,WAAO,KAAKf,KAAL,CAAWW,KAAlB;AACD;;AAEDJ,EAAAA,sBAAsB,GACtB;AACE,WAAO,KAAKP,KAAL,CAAWW,KAAX,GAAmB;AAAE,uBAAkB,UAAS,KAAKX,KAAL,CAAWW,KAAM;AAA9C,KAAnB,GAAuE,IAA9E;AACD;;AAEDK,EAAAA,eAAe,GACf;AACE,WAAO,KAAKhB,KAAL,CAAWW,KAAX,IAAoB,IAA3B;AACD;;AAED,QAAMM,KAAN,CAAYC,IAAZ,EAAkBC,QAAlB,EACA;AACE,UAAM,KAAKhB,cAAL,CAAoBiB,IAApB,CAAyB,iBAAzB,EAA4C;AAChDC,MAAAA,IAAI,EAAEH;AAD0C,KAA5C,EAEHV,IAAI,IAAI;AACT,UAAGA,IAAI,IAAIA,IAAI,CAACG,KAAhB,EACA;AACEC,QAAAA,YAAY,CAACU,OAAb,CAAqB,YAArB,EAAmCC,IAAI,CAACC,SAAL,CAAe;AAAEd,UAAAA,QAAQ,EAAEQ,IAAI,CAACR,QAAjB;AAA2BC,UAAAA,KAAK,EAAEH,IAAI,CAACG;AAAvC,SAAf,CAAnC;AACA,aAAKV,QAAL,CAAc;AAAES,UAAAA,QAAQ,EAAEQ,IAAI,CAACR,QAAjB;AAA2BC,UAAAA,KAAK,EAAEH,IAAI,CAACG;AAAvC,SAAd;AACD;;AAED,UAAGQ,QAAH,EACEA,QAAQ,CAACX,IAAD,CAAR;AACH,KAXK,CAAN;AAYD;;AAED,QAAMiB,MAAN,CAAaN,QAAb,EACA;AACE,UAAM,KAAKhB,cAAL,CAAoBuB,GAApB,CAAwB,kBAAxB,EAA4C;AAChDpB,MAAAA,OAAO,EAAE,KAAKC,sBAAL;AADuC,KAA5C,EAEHC,IAAI,IAAI;AACTI,MAAAA,YAAY,CAACC,UAAb,CAAwB,YAAxB;AACA,WAAKZ,QAAL,CAAc;AAAES,QAAAA,QAAQ,EAAE,EAAZ;AAAgBC,QAAAA,KAAK,EAAE;AAAvB,OAAd;AAEA,UAAGQ,QAAH,EACEA,QAAQ,CAACX,IAAD,CAAR;AACH,KARK,CAAN;AASD;;AAtEH","sourcesContent":["import ApiRequestHandler from \"./ApiRequestHelper\";\n\nexport default class AuthHandler\n{\n  _isMounted = true;\n\n  constructor(state, setState)\n  {\n    this.requestHandler = new ApiRequestHandler();\n    this.state = state;\n    this.setState = setState;\n  }\n  \n  async checkSession()\n  {\n    await this.requestHandler.head('/sessions/check-session', {\n      headers: this.getAuthorizationHeader()\n    }, resp => {\n      if(resp.status !== 204)\n      {\n        this.setState({ username: '', token: null });\n        localStorage.removeItem('user-state');\n      }\n    });\n  }\n\n  getUsername()\n  {\n    return this.state.username;\n  }\n\n  getToken()\n  {\n    return this.state.token;\n  }\n\n  getAuthorizationHeader()\n  {\n    return this.state.token ? { 'Authorization': `Bearer ${this.state.token}` } : null;\n  }\n\n  isAuthenticated()\n  {\n    return this.state.token != null;\n  }\n\n  async login(user, callback)\n  {\n    await this.requestHandler.post('/sessions/login', {\n      body: user\n    }, resp => {\n      if(resp && resp.token)\n      {\n        localStorage.setItem('user-state', JSON.stringify({ username: user.username, token: resp.token }));\n        this.setState({ username: user.username, token: resp.token });\n      }\n  \n      if(callback)\n        callback(resp);\n    });\n  }\n\n  async logout(callback)\n  {\n    await this.requestHandler.get('/sessions/logout', {\n      headers: this.getAuthorizationHeader()\n    }, resp => {\n      localStorage.removeItem('user-state');\n      this.setState({ username: '', token: null });\n\n      if(callback)\n        callback(resp);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}