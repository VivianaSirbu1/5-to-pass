[{"C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\index.js":"1","C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\App.js":"3","C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\components\\Grade.js":"4","C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\components\\UsersTable.js":"5","C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\components\\Login.js":"6","C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\components\\User.js":"7","C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\components\\NavbarMenu.js":"8","C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\entities\\AuthHandler.js":"9","C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\components\\TeamsTable.js":"10","C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\components\\SignUp.js":"11","C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\components\\Home.js":"12","C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\components\\Team.js":"13","C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\entities\\ApiRequestHelper.js":"14"},{"size":547,"mtime":1611220172000,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1611220172000,"results":"17","hashOfConfig":"16"},{"size":3237,"mtime":1611315525655,"results":"18","hashOfConfig":"16"},{"size":6849,"mtime":1611329527901,"results":"19","hashOfConfig":"16"},{"size":4918,"mtime":1611321603241,"results":"20","hashOfConfig":"16"},{"size":2748,"mtime":1611323271749,"results":"21","hashOfConfig":"16"},{"size":12555,"mtime":1611325008989,"results":"22","hashOfConfig":"16"},{"size":2825,"mtime":1611322105387,"results":"23","hashOfConfig":"16"},{"size":1577,"mtime":1611220172000,"results":"24","hashOfConfig":"16"},{"size":6117,"mtime":1611321513998,"results":"25","hashOfConfig":"16"},{"size":4255,"mtime":1611328636056,"results":"26","hashOfConfig":"16"},{"size":1950,"mtime":1611320983222,"results":"27","hashOfConfig":"16"},{"size":11559,"mtime":1611324790145,"results":"28","hashOfConfig":"16"},{"size":2074,"mtime":1611220172000,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"trn27o",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\index.js",[],["62","63"],"C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\App.js",["64","65"],"import './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Redirect,\n  Route,\n} from 'react-router-dom';\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport AuthHandler from './entities/AuthHandler';\nimport Grade from './components/Grade';\nimport Login from './components/Login';\nimport NavbarMenu from './components/NavbarMenu';\nimport SignUp from './components/SignUp';\nimport User from './components/User';\nimport UsersTable from './components/UsersTable';\nimport Home from './components/Home';\nimport TeamsTable from './components/TeamsTable';\nimport Team from './components/Team';\nimport { Button } from 'reactstrap';\n\nfunction PrivateRoute({ useAuthHandler, children, ...rest }) {\n  const authHandler = useAuthHandler();\n\n  return (\n    <Route {...rest}\n      render={({ location }) =>\n        authHandler.isAuthenticated() ? (\n          children\n        ) : (\n            <Redirect to={{\n              pathname: '/login',\n              state: { from: location }\n            }} />\n          )} />\n  );\n}\n\nconst authContext = createContext();\n\nfunction App() {\n  const [userState, setUserState] = useState(JSON.parse(localStorage.getItem('user-state')) || { username: '', token: null });\n  const authHandler = new AuthHandler(userState, setUserState);\n  const useAuthContext = () => useContext(authContext);\n\n  useEffect(_ => (async _ => await authHandler.checkSession())(), []);\n  \n  return (\n   \n       <div className=\"App\">\n      <authContext.Provider value={authHandler}>\n        <Router>\n          <NavbarMenu useAuthHandler={useAuthContext} />\n          <Switch>\n            <PrivateRoute exact path=\"/\" useAuthHandler={useAuthContext}>\n              <Home useAuthHandler={useAuthContext} />\n            </PrivateRoute>\n            <PrivateRoute exact path=\"/user/:username\" useAuthHandler={useAuthContext}>\n              <User useAuthHandler={useAuthContext} />\n            </PrivateRoute>\n            <PrivateRoute exact path=\"/grade\" useAuthHandler={useAuthContext}>\n              <Grade useAuthHandler={useAuthContext}></Grade>\n            </PrivateRoute>\n            <PrivateRoute exact path=\"/students\" useAuthHandler={useAuthContext}>\n              <UsersTable onlyStudents={true} useAuthHandler={useAuthContext} />\n            </PrivateRoute>\n            <PrivateRoute exact path=\"/professors\" useAuthHandler={useAuthContext}>\n              <UsersTable onlyProfessors={true} useAuthHandler={useAuthContext} />\n            </PrivateRoute>\n            <PrivateRoute exact path=\"/teams\" useAuthHandler={useAuthContext}>\n              <TeamsTable useAuthHandler={useAuthContext}></TeamsTable>\n            </PrivateRoute>\n            <PrivateRoute exact path=\"/teams/:teamId\" useAuthHandler={useAuthContext}>\n              <Team useAuthHandler={useAuthContext} />\n            </PrivateRoute>\n\n            <Route exact path=\"/sign-up\">\n              <SignUp useAuthHandler={useAuthContext} />\n            </Route>\n\n            <Route exact path=\"/login\">\n              <Login useAuthHandler={useAuthContext} />\n            </Route>\n\n            <Redirect path=\"*\" to=\"/\" />\n          </Switch>\n        </Router>\n      </authContext.Provider>\n      </div>\n    \n  );\n}\n\nexport default App;\n","C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\components\\Grade.js",["66"],"import {useEffect, useState} from \"react\";\nimport {\n  Alert,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Container,\n  FormGroup,\n  Input,\n  Label,\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  Table,\n} from 'reactstrap';\nimport ApiRequestHelper from '../entities/ApiRequestHelper';\nimport './Card.css';\n\nconst renderTeams = (teams, setEditModalData, setGrade) =>\n{\n  const getGradeFromJury = (userId, jury) => jury.grades.filter(g => g.userId === userId)[0].value.toFixed(2);\n  const formatDeadlineDate = jury =>\n  {\n    if(jury && jury.deadline)\n    {\n      return jury.deadline.replace('T', ' ').substr(0, jury.deadline.length - 5);\n    }\n\n    return null;\n  };\n\n  return (\n    <Table responsive striped hover>\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>Numele Echipei</th>\n          <th>Numele proiectului</th>\n          <th>Nota</th>\n          <th>Deadline</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {teams && teams.values.filter(t => t.Jury.grades.some(g => g.userId === teams.userId)).map((t, i) => (\n          <tr key={t.id}>\n            <th scope=\"row\">{i + 1}</th>\n            <th>{t.name}</th>\n            <th>{t.project_name}</th>\n            <th>\n              <Button color=\"primary\"\n                onClick={() => {\n                  if(getGradeFromJury(teams.userId, t.Jury))\n                  {\n                    setGrade(getGradeFromJury(teams.userId, t.Jury));\n                  }\n                  setEditModalData({ isOpen: true, teamId: t.id, deliverables: t.Deliverables });\n                }}>\n                {getGradeFromJury(teams.userId, t.Jury) || 'Fara nota'}\n              </Button>\n            </th>\n            <th>{formatDeadlineDate(t.Jury.grades.filter(g => g.userId === teams.userId)[0])}</th>\n          </tr>\n        ))}\n        {(!teams || teams.values.filter(t => t.Jury.grades.some(g => g.userId === teams.userId)).length < 1) &&\n          <tr>\n            <th colSpan=\"5\">Nu s-au gasit echipe de juriu.</th>\n          </tr>}\n      </tbody>\n    </Table>\n  );\n};\n\nconst createModal = (color, message, toggle) =>\n{\n  const btnClickEvent = async e =>\n  {\n    await toggle(e);\n    if(color === 'success')\n    {\n      window.location.reload();\n    }\n  };\n\n  return (\n    <Modal isOpen={message.length > 0} toggle={toggle}>\n      <ModalHeader>{ color === 'success' ? 'Success' : 'Error' }</ModalHeader>\n      \n      <ModalBody>\n        <Alert color={color}>{message}</Alert>\n      </ModalBody>\n      \n      <ModalFooter>\n        <Button color=\"primary\" onClick={btnClickEvent}>Ok</Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nconst getTeamsData = async (requestHandler, authHandler, teams, setTeams, setError) =>\n{\n  let detailedTeams = [], error = null;\n  const processResp = resp => resp.status !== 200 ? error = resp.message : detailedTeams.push(resp);\n\n  for(let t of teams.values)\n  {\n    await requestHandler.get(`/teams/${t.id}`, {\n      headers: authHandler.getAuthorizationHeader()\n    }, processResp);\n\n    if(error != null)\n    {\n      break;\n    }\n  }\n\n  if(error != null)\n  {\n    setError(error);\n  }\n  else\n  {\n    setTeams({ values: detailedTeams, userId: teams.userId });\n  }\n}\n\nconst createEditModal = (authHandler, data, setData, grade, setGrade, setSuccess, setError) =>\n{\n  const handleChange = e =>\n  {\n    if(e.target.value !== '')\n    {\n      let value = parseFloat(e.target.value);\n      if(isNaN(value))\n      {\n        setError('Nota nu este un numar');\n      }\n      else\n      {\n        setGrade(value);\n      }\n    }\n  };\n\n  const saveGrade = async _ =>\n  {\n    const requestHandler = new ApiRequestHelper();\n\n    // await requestHandler.post(`/teams/${data.teamId}/grade`, {\n    //   body: { grade: grade },\n    //   headers: authHandler.getAuthorizationHeader()\n    // }, resp => resp.status === 200 ? setSuccess(resp.message) : setError(resp.message));\n  };\n\n  return (\n    <Modal isOpen={data.isOpen} toggle={_ => setData({ isOpen: false })}>\n      <ModalHeader>Modifica nota</ModalHeader>\n      <ModalBody>\n        <Table responsive striped hover >\n          <thead>\n            <tr>\n              <th>Tema</th>\n              <th>Descriere</th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            {data.deliverables && data.deliverables.map((d, i) => (\n              <tr key={i}>\n                <th>{d.title}</th>\n                <th>{d.description}</th>\n                <th><a className=\"link\" href={d.url || 'https://google.com'} rel=\"noreferrer\" target=\"_blank\">Deschide</a></th>\n              </tr>\n            ))}\n            {!data.deliverables && (\n              <tr>\n                <th colSpan=\"3\">Nu s-au gasit teme.</th>\n              </tr>\n            )}\n          </tbody>\n        </Table>\n        <FormGroup>\n          <Label for=\"grade\">Note</Label>\n          <Input id=\"grade\" name=\"grade\"\n            type=\"number\" placeholder=\"10\" min=\"0\" max=\"10\"\n            step=\"0.5\"\n            value={grade} onChange={handleChange} />\n        </FormGroup>\n      </ModalBody>\n      <ModalFooter>\n        <Button onClick={_ => setData({ isOpen: false })}>Cancel</Button>\n        <Button color=\"primary\" onClick={async _ => await saveGrade()}>Save</Button>\n      </ModalFooter>\n    </Modal>\n  );\n}\n\nexport default function Grade({ useAuthHandler })\n{\n  const authHandler = useAuthHandler();\n  const [teams, setTeams] = useState(null);\n  const [success, setSuccess] = useState('');\n  const [error, setError] = useState('');\n  const [editModal, setEditModalData] = useState({ isOpen: false });\n  const [grade, setGrade] = useState(5);\n\n  useEffect(_ =>\n  {\n    const requestHandler = new ApiRequestHelper();\n\n    (async _ => {\n      requestHandler.get(`/users`, {\n        query: `?username=${authHandler.getUsername()}`,\n        headers: authHandler.getAuthorizationHeader()\n      }, async resp => resp.status !== 200 ? setError(resp.message) : await requestHandler.get(`/users/${resp[0].id}`, {\n        headers: authHandler.getAuthorizationHeader()\n      }, async userResp => {\n        if(userResp.status !== 200)\n        {\n          setError(userResp.message);\n        }\n        else\n        {\n          await getTeamsData(requestHandler, authHandler, { values: [ ...userResp.Juries.map(j => j.Team) ], userId: userResp.id }, setTeams, setError);\n        }\n      }));\n    })();\n  }, [authHandler]);\n\n  return (\n    <Container className=\"py-2\">\n      {createModal('success', success, _ => setSuccess(''))}\n      {createModal('danger', error, _ => setError(''))}\n      {createEditModal(authHandler, editModal, setEditModalData, grade, setGrade, setSuccess, setError)}\n      <Card id=\"table-home\">\n        <CardHeader>Proiect pentru notare</CardHeader>\n        <CardBody>\n          {renderTeams(teams, setEditModalData, setGrade)}\n        </CardBody>\n      </Card>\n    </Container>\n  );\n}\n","C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\components\\UsersTable.js",[],"C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\components\\Login.js",[],"C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\components\\User.js",["67"],"import { useState, useEffect } from 'react';\nimport {\n  Alert,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardSubtitle,\n  CardTitle,\n  Col,\n  Container,\n  Form,\n  FormGroup,\n  Input,\n  Label,\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  Row,\n  Table\n} from 'reactstrap';\nimport ApiRequestHandler from '../entities/ApiRequestHelper';\nimport { useParams } from 'react-router-dom';\nimport './Card.css';\n\nconst renderTeams = (authHandler, user, setError, setSuccess, setConfirmation) => {\n  const requestHandler = new ApiRequestHandler();\n  const deleteFromTeam = async (teamId, user) => {\n    await requestHandler.delete(`/teams/${teamId}/members`, {\n      headers: authHandler.getAuthorizationHeader(),\n      body: [{ id: user.id, username: user.username }]\n    }, resp => {\n      resp.status !== 200 ? setError(resp.message) : setSuccess(resp.message);\n      setConfirmation({require: false});\n    });\n  };\n\n  const renderTeamsHeader = _ =>\n  {\n    return (<tr>\n      <th>#</th>\n      <th>Numele echipei</th>\n      <th>Numele proiectului</th>\n      <th>Nota</th>\n      {user.Teams && user.Teams.length > 0 && user.currentUser && user.currentUser.is_professor === 1 && <th></th>}\n    </tr>);\n  };\n  const renderTeamRow = (t, i) =>\n  {\n    const computeGrade = t => {\n      const grade = (t.Jury.grades.reduce((sum, g) => sum + g.value, 0) / t.Jury.grades.length).toFixed(2);\n\n      if(isNaN(grade))\n        return 'None';\n      return grade;\n    }\n\n    return (<tr key={t.id}>\n      <th scope=\"row\">{i + 1}</th>\n      <th>{t.name}</th>\n      <th>{t.project_name}</th>\n      <th>{computeGrade(t)}</th>\n      { user.currentUser && user.currentUser.is_professor === 1 &&\n      <th><Button size=\"xs\" color=\"danger\" onClick={() => setConfirmation({ require: true, message: `Esti sigur ca vrei sa stergi membrul: ${user.name} ${user.surname} din echipa'${t.name}'?`, callback: async () => await deleteFromTeam(t.id, user) })}>Sterge</Button></th>\n      }\n    </tr>);\n  };\n\n  return (\n    <Card >\n      <CardHeader id=\"table-home\">\n        <CardTitle tag=\"h5\">Echipe</CardTitle>\n      </CardHeader>\n      <CardBody>\n        <Table striped responsive>\n          <thead>\n            { renderTeamsHeader() }\n          </thead>\n          <tbody>\n            { user && user.Teams && user.Teams.length > 0 && user.Teams.map((t, i) => renderTeamRow(t, i)) }\n            { !(user && user.Teams && user.Teams.length > 0) &&\n              <tr>\n                <th colSpan=\"3\">Nu e membru dintr-o echipa.</th>\n              </tr>\n            }\n          </tbody>\n        </Table>\n      </CardBody>\n    </Card>\n  );\n}\n\nconst renderJuries = (authHandler, user, setError, setSuccess, setConfirmation) => {\n  const requestHandler = new ApiRequestHandler();\n  const deleteFromTeam = async (teamId, user) => {\n    await requestHandler.delete(`/teams/${teamId}/juries`, {\n      headers: authHandler.getAuthorizationHeader(),\n      body: [{ id: user.id, username: user.username }]\n    }, resp => {\n      resp.status !== 200 ? setError(resp.message) : setSuccess(resp.message);\n      setConfirmation({require: false});\n    });\n  };\n\n  const renderJuriesHeader = _ =>\n  {\n    if(user.currentUser.username === user.username)\n    {\n      return (\n        <tr>\n          <th>#</th>\n          <th>Numele echipei</th>\n          <th>Numele proiectului</th>\n          <th>Nota</th>\n          <th>Deadline</th>\n          {user.Teams && user.Teams.length > 0 && user.currentUser && user.currentUser.is_professor === 1 && <th></th>}\n        </tr>);\n    }\n\n    return (\n      <tr>\n        <th>#</th>\n        <th>Numele echipei</th>\n        <th>Numele proiectului</th>\n        {user.Teams && user.Teams.length > 0 && user.currentUser && user.currentUser.is_professor === 1 && <th></th>}\n      </tr>);\n  };\n\n  const renderJuryRow = (j, i) =>\n  {\n    if(user.currentUser.username === user.username)\n    {\n      return (<tr key={j.id}>\n        <th scope=\"row\">{i + 1}</th>\n        <th>{j.Team.name}</th>\n        <th>{j.Team.project_name}</th>\n        <th>{j.UserJury.grade}</th>\n        <th>{j.UserJury.deadline && j.UserJury.deadline.replace('T', ' ').substr(0, j.UserJury.deadline.length - 5)}</th>\n        { user.currentUser && user.currentUser.is_professor === 1 &&\n        <th><Button size=\"xs\" color=\"danger\" onClick={() => setConfirmation({ require: true, message: `Esti sigur ca vrei sa stergi membrul:  ${user.name} ${user.surname} din echipa'${j.Team.name}'?`, callback: async () => await deleteFromTeam(j.Team.id, user) })}>Sterge</Button></th>\n        }\n      </tr>);\n    }\n\n    return (<tr key={j.id}>\n      <th scope=\"row\">{i + 1}</th>\n      <th>{j.Team.name}</th>\n      <th>{j.Team.project_name}</th>  \n      { user.currentUser && user.currentUser.is_professor === 1 &&\n      <th><Button size=\"xs\" color=\"danger\" onClick={() => setConfirmation({ require: true, message: `Esti sigur ca vrei sa stergi membrul: ${user.name} ${user.surname} din echipa '${j.Team.name}'?`, callback: async () => await deleteFromTeam(j.Team.id, user) })}>Sterge</Button></th>\n      }\n    </tr>);\n  }\n\n  return (\n    <Card>\n      <CardHeader id=\"table-home\">\n        <CardTitle tag=\"h5\">Membrul in juriul:</CardTitle>\n      </CardHeader>\n      <CardBody>\n        <Table striped responsive>\n          <thead>\n              { renderJuriesHeader() }\n          </thead>\n          <tbody>\n            { user && user.Juries && user.Juries.length > 0 && user.Juries.map((j, i) => renderJuryRow(j, i)) }\n            { !(user && user.Juries && user.Juries.length > 0) &&\n              <tr>\n                <th colSpan=\"5\">Nu face parte dintr-o echipa de jurati.</th>\n              </tr>\n            }\n          </tbody>\n        </Table>\n      </CardBody>\n    </Card>\n  );\n}\n\nexport default function User({ useAuthHandler })\n{\n  const authHandler = useAuthHandler();\n  const [user, setUser] = useState(null);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [confirmation, setConfirmation] = useState({ require: false });\n  const [isEdittingUserData, editUserData] = useState(false);\n  const [userData, setUserData] = useState({});\n  const { username } = useParams();\n  const renderTeamsAndJuries = () => user && user.is_professor === 0 ? (\n      <Row xs=\"2\">\n        <Col>{renderTeams(authHandler, user, setError, setSuccess, setConfirmation)}</Col>\n        <Col>{renderJuries(authHandler, user, setError, setSuccess, setConfirmation)}</Col>\n      </Row>\n  ) : null;\n  const getUserData = async (requestHandler) => {\n    let currentUser;\n    await requestHandler.get('/users', {\n      query: `?username=${authHandler.getUsername()}`,\n      headers: authHandler.getAuthorizationHeader()\n    }, resp => resp.message ? setError(resp.message) : currentUser = resp[0]);\n\n    await requestHandler.get('/users', {\n      query: `?username=${username}`,\n      headers: authHandler.getAuthorizationHeader()\n    }, async resp => {\n      if (resp && (resp.status !== 200 || resp.length < 1 || resp[0].name == null))\n      {\n        setError(resp.message || 'Nu s-a putut gasi user-ul');\n      }\n      else if(resp && resp[0])\n      {\n        await requestHandler.get(`/users/${resp[0].id}`, {\n          headers: authHandler.getAuthorizationHeader()\n        }, async userResp => {\n          if(userResp && userResp.status !== 200)\n          {\n            setError(userResp.message);\n          }\n          else\n          {\n            for(let i = 0; i < userResp.Teams.length; ++i)\n            {\n              await requestHandler.get(`/teams/${userResp.Teams[i].id}`, {\n                headers: authHandler.getAuthorizationHeader() \n              }, teamResp => userResp.Teams[i].Jury = teamResp.Jury);\n            }\n            setUser({ ...userResp, currentUser: currentUser });\n            setUserData({ ...userResp });\n          }\n        });\n      }\n    });\n  };\n  const handleChange = e => {\n    let currentData = { ...userData };\n    if(e.target.type === 'checkbox')\n    {\n      currentData[e.target.name] = e.target.checked;\n    }\n    else\n    {\n      currentData[e.target.name] = e.target.value;\n    }\n    setUserData(currentData);\n  };\n  const saveUserData = async () => {\n    const requestHandler = new ApiRequestHandler();\n    await requestHandler.put(`/users/${user.id}`, {\n      headers: authHandler.getAuthorizationHeader(),\n      body: { ...userData }\n    }, resp => {\n      if(resp.status !== 200)\n      {\n        //editUserData(false);\n        setError(resp.message);\n      }\n      else\n      {\n        setSuccess(resp.message);\n      }\n    });\n  };\n\n  useEffect(() => {\n    const requestHandler = new ApiRequestHandler();\n    getUserData(requestHandler);\n  }, [username]);\n\n  return (\n    <Container fluid='true' className=\"py-2 px-5\">\n      <Modal isOpen={confirmation.require} toggle={() => setConfirmation({require: false})}>\n        <ModalHeader>Sters din echipa</ModalHeader>\n        <ModalBody>\n          <Alert color=\"danger\">{confirmation.message}</Alert>\n        </ModalBody>\n        <ModalFooter>\n          <Button onClick={() => setConfirmation({ require: false })}>Cancel</Button>\n          <Button color=\"danger\" onClick={confirmation.callback}>Sterge</Button>\n        </ModalFooter>\n      </Modal>\n      <Modal isOpen={success.length > 0} toggle={() => setSuccess('')}>\n        <ModalHeader>Cont creeat.</ModalHeader>\n        \n        <ModalBody>\n          <Alert color=\"success\">{success}</Alert>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button color=\"primary\" onClick={() => {\n            if(userData.username !== username)\n            {\n              localStorage.removeItem('user-state');\n            }\n            window.location.reload();\n            setSuccess('');\n            }}>\n            Ok\n          </Button>\n        </ModalFooter>\n      </Modal>\n      <Modal isOpen={isEdittingUserData} toggle={() => editUserData(false)}>\n        <ModalHeader>Editeaza date</ModalHeader>\n        <Form onSubmit={e => e.preventDefault()} method=\"POST\" className=\"text-left\">\n          <ModalBody>\n            <FormGroup>\n              <Label for=\"username\">Username</Label>\n              <Input id=\"username\" name=\"username\" type=\"text\" placeholder=\"userName\" value={userData.username} onChange={handleChange} />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"surname\">Prenume</Label>\n              <Input id=\"surname\" name=\"surname\" type=\"text\" placeholder=\"Ion\" value={userData.surname} onChange={handleChange} />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"name\">Nume</Label>\n              <Input id=\"name\" name=\"name\" type=\"text\" placeholder=\"Vasile\" value={userData.name} onChange={handleChange} />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"password\">parola</Label>\n              <Input id=\"password\" name=\"password\" type=\"password\" placeholder=\"******\" value={userData.password} onChange={handleChange} />\n            </FormGroup>\n            <FormGroup check>\n              <Label check>\n                <Input id=\"is_professor\" type=\"checkbox\" name=\"is_professor\" checked={userData.is_professor === 1} onChange={handleChange} />{' '}\n               Const profesor\n              </Label>\n            </FormGroup>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => editUserData(false)}>Cancel</Button>\n            <Button color=\"danger\" onClick={async () => { await saveUserData(); }}>Save</Button>\n          </ModalFooter>\n        </Form>\n      </Modal>\n      <Modal isOpen={error.length > 0} toggle={() => setError('')}>\n        <ModalHeader>Error</ModalHeader>\n        <ModalBody>\n          <Alert color=\"danger\">Nu s-a putut gasi user-ul. {error}</Alert>\n        </ModalBody>\n        <ModalFooter>\n          <Button onClick={() => setError('')}>Ok</Button>\n        </ModalFooter>\n      </Modal>\n      <Row className=\"my-2 mb-3\">\n        <Col md=\"4\" className=\"mx-auto\">\n          { user && error.length < 1 &&\n          <Card>\n              <CardBody>\n                <CardTitle tag=\"h4\">{ `${user.surname}, ${user.name}` }</CardTitle>\n                <CardSubtitle tag=\"h6\" className=\"mb-2 text-muted\">{ user ? (user.is_professor === 1 ? 'Professor' : 'Student') : null }</CardSubtitle>\n                {user.currentUser && user.currentUser.is_professor === 1 && <Button size=\"sm\" color=\"primary\" onClick={() => editUserData(true)}>Modifica</Button>}\n              </CardBody>\n          </Card> \n          }\n        </Col>\n      </Row>\n      {renderTeamsAndJuries()}\n    </Container>\n  );\n}\n","C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\components\\NavbarMenu.js",[],"C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\entities\\AuthHandler.js",[],"C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\components\\TeamsTable.js",[],"C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\components\\SignUp.js",[],"C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\components\\Home.js",[],"C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\components\\Team.js",[],"C:\\Users\\Viviana\\Desktop\\proiect\\client\\src\\entities\\ApiRequestHelper.js",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":19,"column":10,"nodeType":"74","messageId":"75","endLine":19,"endColumn":16},{"ruleId":"76","severity":1,"message":"77","line":45,"column":67,"nodeType":"78","endLine":45,"endColumn":69,"suggestions":"79"},{"ruleId":"72","severity":1,"message":"80","line":149,"column":11,"nodeType":"74","messageId":"75","endLine":149,"endColumn":25},{"ruleId":"76","severity":1,"message":"81","line":268,"column":6,"nodeType":"78","endLine":268,"endColumn":16,"suggestions":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'authHandler'. Either include it or remove the dependency array.","ArrayExpression",["85"],"'requestHandler' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getUserData'. Either include it or remove the dependency array.",["86"],"no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},{"desc":"89","fix":"90"},"Update the dependencies array to be: [authHandler]",{"range":"91","text":"92"},"Update the dependencies array to be: [getUserData, username]",{"range":"93","text":"94"},[1416,1418],"[authHandler]",[8663,8673],"[getUserData, username]"]